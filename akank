provider "aws" {
  region     = "ap-south-1"
  profile    = "lwprofile"
}


resource "aws_security_group" "mysecurity" {
   name        = "mysecurity"
   description = "cresting a sg"
   

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }
 ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }
 ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }

 egress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }
 egress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }
 egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks=["0.0.0.0/0"]
  
  }


}


resource "aws_instance" "myins" {
  ami           = "ami-0447a12f28fddb066"
  instance_type = "t2.micro"
  key_name = "pemkey"
security_groups= [aws_security_group.mysecurity.name]

connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key=file("C:/Users/admin/Downloads/pemkey.pem")
    host     =  aws_instance.myins.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd php git -y",
      "sudo systemctl restart httpd",
      "sudo systemctl  enable httpd"
    
  ]
}

  tags = {
    Name = "myos"
  }
}


resource "null_resource" "nulllocal1" {
 

  provisioner "local-exec" {
    command = " echo ${aws_instance.myins.public_ip}  > publicip.txt"
  }
}


output  "my_public_ip" {
value= aws_instance.myins.public_ip
}


resource "aws_ebs_volume" "myebs" {
  availability_zone = aws_instance.myins.availability_zone
  size              = 1

  tags = {
    Name = "myhdtera"
  }
}

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/xvdb"
  volume_id   = aws_ebs_volume.myebs.id
  instance_id = aws_instance.myins.id
}
resource "null_resource" "nullRemote" {
  depends_on = [
    aws_volume_attachment.ebs_att,
    aws_s3_bucket_object.teraimage

  ]

  connection {
    type = "ssh"
    user = "ec2-user"
    host = aws_instance.myins.public_ip
    private_key = file("C:/Users/admin/Downloads/pemkey.pem")
    
  }
  provisioner "remote-exec" {
    inline = [
       "sudo mkfs.ext4 /dev/xvdb",
       "sudo mount /dev/xvdb /var/www/html",
       "sudo yum install git -y",
       "sudo rm -rf /var/www/html/*",
       "sudo git clone https://github.com/akku0225/multicloud.git  /temp_repo",
       "sudo cp -rf /temp_repo/* /var/www/html",
      #"sudo rm -rf /temp_repo"
      
    ]
  }

  
 /* provisioner "remote-exec" {
       when    = destroy
         inline  = [
             "sudo umount /var/www/html"
        ]
    }
*/
}

# resource "null_resource" "nullloacl1" {
# depends_on = [
#     null_resource.nullRemote,
# e]
#   provisioner "local-exec" {
#     command = "firefox ${aws_instance.myins.public_ip}"
#   }
# }
 
resource "aws_s3_bucket" "mybuc1" {
  bucket = "terabuc"
  acl    = "public-read" #bucket level safty
  provisioner "local-exec" {
command = "git clone https://github.com/akku0225/s3.git /webserverimage9"
}

versioning {
    enabled = true
  }

  tags = {
    Name        = "Mybuc"
    Environment = "Dev"
  }
}


locals {
  s3_origin_id = "myS3Origin"
}

 
resource "aws_s3_bucket_object" "teraimage" {
  bucket = aws_s3_bucket.mybuc1.bucket
  key    = "flower6.jpg"
   
 # object level saftyyes
 
  source ="/webserverimage9/flower6.jpg" 
 acl  ="public-read"
}


resource "aws_cloudfront_distribution" "s3_distribution" {
 depends_on = [ 
    aws_cloudfront_origin_access_identity.origin_access_identity, 
    null_resource.nullRemote
  ]
  origin {
    domain_name = aws_s3_bucket.mybuc1.bucket_regional_domain_name
    origin_id   = local.s3_origin_id  
    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }


  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("C:/Users/admin/Downloads/pemkey.pem")
    host     = aws_instance.myins.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo su << EOF",
      "echo \"<img src='http://${self.domain_name}/${aws_s3_bucket_object.teraimage.key}'>\" >> /var/www/html/index.html",
      "EOF"
    ]
  }

  enabled             = true
  is_ipv6_enabled     = true
  comment             = "Some comment"
  default_root_object = "index.html"

   logging_config {
     include_cookies = false
   bucket          =  aws_s3_bucket.mybuc1.bucket_regional_domain_name
     prefix          = "myprefix"
   }

default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  # Cache behavior with precedence 0
  ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false
      headers      = ["Origin"]

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  # Cache behavior with precedence 1
  ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  price_class = "PriceClass_200"


 restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
    
        

  tags = {
    Environment = "production"
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}
 
